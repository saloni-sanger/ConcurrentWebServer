# A Concurrent Web Server

### Background
In this project I developed a concurrent web server in C. The web server serves both static (simple HTML files)
and dynamic content (generated by an executable).

##### How to call the programs
The client program sends an HTTP request to the server, recieves the response, and displays it on the screen.
You must run the wclient program in this way:

wclient [-s server] [-p port]

These specifications are for the client to connect successfully to the server.

While the wserver has default values for these parameters, I recommend running the program in this way:

wserver [-p port] [-t threads] [-b buffer]

port: the port number the web server should listen on. Default: 10401
threads: the number of worker threads that should be created within the web server. Default: 1
buffer: the number of request connections that can be accepted at one time. Default: 1

##### Static requests
To download a file from the server, the client sends an HTTP GET request.
Assuming the file exists and the web server has the necessary permissions to access it, the server will
memory map, then send, the file to the client upon request.

##### Dynamic requests
URLs for executable files must include 2 program arguments after the file name, string user and int n.
An example request line would be:

GET fib.cgi?user=me&n=5 HTTP/1.1\r\n

The arguments requested are stored in the QUERY_STRING standard encironment variable for the executable's
access. dup2() is called before the execve() to perform I/O redirection.

fib.cgi: standalone C++ program that calculates the nth Fibonacci number % 1,000,000,007 and
returns a HTTP response message including the parameter values to the client.
An example of the response body would be:

me, welcome to the CGI program!
The 5th Fibonacci number is 5.

##### Multithreaded web server
A producer thread and a fixed size pool of worker threads is created by main upon server startup.
Each worker thread is blocked using semaphores until there is an HTTP request for it to handle.

If there are more worker threads than active requests, some threads will be blocked, waiting for new HTTP 
requests to arrive.
If there are more requests than worker threads, those request will be buffered until there is an available thread.
The server's scheduling policy is FIFO.
Note that the HTTP requests will not necessarily finish in FIFO order; the order in which the requests complete
will depend upon how the OS schedules the active threads.

The producer thread accepts new HTTP connections over the network, places the socket's descriptor into the buffer,
and signals a worker to read and process the request.

Mutexes are used to lock the 2 critical regions: accessing the shared buffer, and accessing the socket connection.

Semaphores are used to to block the producer if the buffer is full, and block the consumer if the buffer is empty.

Note that for dynamic requests, the worker thread forks a child process which runs the CGI program.
The thread explicitly waits for the child CGI process to complete before continuing onto the next HTTP request.

##### Security and Error Handling
Paths containing ".." are rejected (403).
HTTP request methods other than GET are rejected (501).
HTTP versions other than 1.1 are rejected (502).
Requests for non-existent files are rejected (404).
Requests for files the server does not have read access for are rejected (403).
Negative or large values for n are rejected (500).

#### Project Strengths
- Return values for system calls are checked for errors.
- Memory leaks avoided with proper use of scopes and closing unused file descriptors.
- Displayed messages have nice formatting.
- No debugging messages are displayed.

#### Project Weaknesses
- Code repitition could be refined through .h files or functions within the program.
- Date header missing from web server's HTTP responses.
- Checking if the value passed for n is an integer is not explicitly checked.

#### Makefile

##### all:
make all is equivalent to make p1.
##### p1:
make p1 creates executables for the 3 programs,
will compile if needed to update or create.
##### clean:
Will erase the .o files created by make p1 or make all.